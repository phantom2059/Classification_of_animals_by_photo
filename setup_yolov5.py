#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ YOLOv5 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MegaDetector
"""

import os
import subprocess
import sys
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"\n{description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞:")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ YOLOv5 –¥–ª—è MegaDetector")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ yolov5
    yolo_path = Path("yolov5")
    if yolo_path.exists():
        print("üìÅ –ü–∞–ø–∫–∞ yolov5 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        response = input("–£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/N): ")
        if response.lower() == 'y':
            import shutil
            shutil.rmtree(yolo_path)
            print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ yolov5 —É–¥–∞–ª–µ–Ω–∞")
        else:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º YOLOv5
    if not run_command(
        "git clone https://github.com/ultralytics/yolov5.git",
        "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è YOLOv5"
    ):
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç scipy –≤ plots.py
    plots_file = yolo_path / "utils" / "plots.py"
    if plots_file.exists():
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ scipy...")
        try:
            with open(plots_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
            content = content.replace(
                "from scipy.ndimage import gaussian_filter1d",
                "from scipy.ndimage import gaussian_filter1d"
            )
            
            with open(plots_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("‚úÖ –ò–º–ø–æ—Ä—Ç scipy –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
    if not run_command(
        'pip install "numpy<2.0" "scipy>=1.7.0"',
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π numpy –∏ scipy"
    ):
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –ø–∞–∫–µ—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if Path("src/test_detector.py").exists():
        if run_command(
            "python src/test_detector.py",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"
        ):
            print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MegaDetector –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö.")
        else:
            print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    else:
        print("\n‚úÖ YOLOv5 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–§–∞–π–ª test_detector.py –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

if __name__ == "__main__":
    main() 